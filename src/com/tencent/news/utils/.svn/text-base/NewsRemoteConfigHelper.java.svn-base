package com.tencent.news.utils;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import android.content.Intent;
import android.graphics.Bitmap;

import com.tencent.news.api.TencentNews;
import com.tencent.news.boss.EventId;
import com.tencent.news.command.GetImageRequest;
import com.tencent.news.command.GetImageResponse;
import com.tencent.news.command.HttpDataRequest;
import com.tencent.news.command.HttpDataResponse;
import com.tencent.news.command.HttpTagDispatch.HttpTag;
import com.tencent.news.config.Constants;
import com.tencent.news.http.HttpEngine.HttpCode;
import com.tencent.news.model.pojo.ChannelList;
import com.tencent.news.model.pojo.ExtendedChannels;
import com.tencent.news.model.pojo.ImageResult;
import com.tencent.news.model.pojo.ImageType;
import com.tencent.news.model.pojo.ListMapData;
import com.tencent.news.model.pojo.Pic;
import com.tencent.news.model.pojo.RemoteConfig;
import com.tencent.news.model.pojo.SplashData;
import com.tencent.news.system.Application;
import com.tencent.news.task.TaskManager;
import com.tencent.omg.webdev.WebDev;

/**
 * @author      haiyandu
 * @description    
 * @date        2012-8-23
 */
public class NewsRemoteConfigHelper implements HttpDataResponse,GetImageResponse{
	private static NewsRemoteConfigHelper mInstance =  null;
	private RemoteConfig mOldConfig;
	private List<String> mImageUrl = new ArrayList<String>();
	private List<String> mExtendIconUrl = new ArrayList<String>();
	private SplashData mSplash;
	private ExtendedChannels mExtendedChannel;
	
	private NewsRemoteConfigHelper(){
		
	}
	
	public static synchronized NewsRemoteConfigHelper getInstance(){
		if(mInstance == null){
			mInstance = new NewsRemoteConfigHelper();
		}
		return mInstance;
	}

	public void InitRemoteConfig(){
		mOldConfig = InfoConfigUtil.ReadRemoteConfig();
		if(mImageUrl == null){
			mImageUrl = new ArrayList<String>();
		}
		if(mExtendIconUrl == null){
			mExtendIconUrl = new ArrayList<String>();
		}
		mImageUrl.clear();
		mExtendIconUrl.clear();
		TaskManager.clearImageCache();
		getRemoteConfig();
		
	}
	
	
	//success true delete old and rename new file,or false delete new file
	private void deleteOldSplashImage(final boolean success){
		try{
			TaskManager.startRunnableRequest(new Runnable(){
				@Override
				public void run() {
					// TODO Auto-generated method stub
					if(success){
						InfoConfigUtil.WriteSplash(mSplash);
						File oldSplashDir = ImageCacheNameUtil.getSplashImageFileDir();
						File delFile = new File(oldSplashDir.getPath() + "_del");
						oldSplashDir.renameTo(delFile);
						FileUtil.delete(delFile, true);
						
						File newsSplashDir = ImageCacheNameUtil.getNewSplashImageFileDir();
						newsSplashDir.renameTo(oldSplashDir);
						
					}else{
						File newsSplashDir = ImageCacheNameUtil.getNewSplashImageFileDir();
						FileUtil.delete(newsSplashDir, true);
					}
				}
				
			});
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	private void deleteOldExtendImage(final boolean success){
		try{
			TaskManager.startRunnableRequest(new Runnable(){
				@Override
				public void run() {
					// TODO Auto-generated method stub
					if(success){
						InfoConfigUtil.WriteExtendedChannels(mExtendedChannel);
						File oldExtendDir = ImageCacheNameUtil.getExtendedIconFileDir();
						File delFile = new File(oldExtendDir.getPath() + "_del");
						oldExtendDir.renameTo(delFile);
						FileUtil.delete(delFile, true);
						
						File newsSplashDir = ImageCacheNameUtil.getNewExtendedIconFileDir();
						newsSplashDir.renameTo(oldExtendDir);
						
					}else{
						File newsSplashDir = ImageCacheNameUtil.getNewExtendedIconFileDir();
						FileUtil.delete(newsSplashDir, true);
					}
				}
				
			});
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	private void startDownLoadImage(SplashData splash){
		if(splash != null && splash.getPics() != null){
			int nSize = splash.getPics().length;
			for(int i = 0; i < nSize; i++){
				Pic pic = splash.getPics()[i];
				if(pic != null){
					getSplashPics(pic.getBackGround());
					getSplashPics(pic.getLogo());
					getSplashPics(pic.getPic());
				}
			}
		}
	}
	
	private void getSplashPics(String url){
		if(url == null || url.equals("")){
			return;
		}
		if(mImageUrl != null && !mImageUrl.contains(url)){
			mImageUrl.add(url);
			SLog.i("NewsRemoteConfigHelper", "mImageUrl" + mImageUrl.size() + "url"+url);
		}
		GetImageRequest request = new GetImageRequest();
		request.setGzip(false);
		request.setTag(url);
		request.setUrl(url);
		ImageResult result = TaskManager.startSplashImageTask(request, this);
		if(result.isResultOK() && result.getRetBitmap() != null){
			mImageUrl.remove(url);
		}
	}
	
	private void startDownLoadExtendedIcon(ExtendedChannels subChannel){
		if(subChannel != null && subChannel.getIcon() != null && subChannel.getIcon_hl() != null){
			getExtendedIcon(subChannel.getIcon());
			getExtendedIcon(subChannel.getIcon_hl());
		}
	}
	
	private void getExtendedIcon(String url){
		if(url == null || url.equals("")){
			return;
		}
		if(mExtendIconUrl != null && !mExtendIconUrl.contains(url)){
			mExtendIconUrl.add(url);
		}
		GetImageRequest request = new GetImageRequest();
		request.setGzip(false);
		request.setTag(url);
		request.setUrl(url);
		ImageResult result = TaskManager.startExtendedImageTask(request, this);
		if(result.isResultOK() && result.getRetBitmap() != null){
			mExtendIconUrl.remove(url);
		}
	}
	
	private void getRemoteConfig(){
		HttpDataRequest request = TencentNews.getInstance().getQQNewsRemoteConfig();
		TaskManager.startHttpDataRequset(request, NewsRemoteConfigHelper.this);
		
		WebDev.trackCustomBeginEvent(Application.getInstance().getApplicationContext(), EventId.ITIL_LOAD_REMOTE_CONFIG_TIME);
		
	}
	
	private void getChannelList(){
		HttpDataRequest request = TencentNews.getInstance().getSubChannels();
		TaskManager.startHttpDataRequset(request, this);
	}
	
	private void getExtendedChannelList(){
		HttpDataRequest request = TencentNews.getInstance().getExtendedSubChannels();
		TaskManager.startHttpDataRequset(request, this);
	}
	
	private void getSplashData(){
		HttpDataRequest request = TencentNews.getInstance().getSplashData();
		TaskManager.startHttpDataRequset(request, this);

		WebDev.trackCustomBeginEvent(Application.getInstance().getApplicationContext(), EventId.ITIL_LOAD_SPLASH_TIME);
	}
	
//	private void getAppListData(){
//		HttpDataRequest request = TencentNews.getInstance().getAppListQQNews();
//		TaskManager.startHttpDataRequset(request, this);
//	}
	
	
	private void checkRemoteSubVersion(RemoteConfig newconfig){
		try{
			ListMapData mChannelList = InfoConfigUtil.ReadSubChannel();
			if(mChannelList != null && newconfig != null){
				float channelVersion = Float.valueOf(mChannelList.getVersion());
				float remoteChannelVersion = Float.valueOf(newconfig.getSubMenuVersion());
				if(channelVersion < remoteChannelVersion){
					getChannelList();
				}
			}
			
			SplashData mSplashData = InfoConfigUtil.ReadSplash();
			if(mSplashData != null && newconfig != null){
				float splashVersion = Float.valueOf(mSplashData.getVersion());
				float remoteSplashVersion = Float.valueOf(newconfig.getSplashVersion());
				if(splashVersion < remoteSplashVersion){
					getSplashData();
				}
			}
			
//			AppList mAppList = InfoConfigUtil.ReadAppList();
//			if(mAppList != null && newconfig != null){
//				float appListVersion = Float.valueOf(mAppList.getVersion());
//				float remoteAppListVersion = Float.valueOf(newconfig.getBoutiqueVersion());
//				if(appListVersion < remoteAppListVersion){
//					getAppListData();
//				}
//			}
			
			ExtendedChannels mExtendedChannels = InfoConfigUtil.ReadExtendedChannels();
			if(mExtendedChannels != null && newconfig != null){
				float extendedVersion = Float.valueOf(mExtendedChannels.getVersion());
				float remoteExtendedVersion = Float.valueOf(newconfig.getSubMenuExtendVersion());
				if(extendedVersion < remoteExtendedVersion){
					getExtendedChannelList();
				}
			}
			
		}catch(NumberFormatException e){
			e.printStackTrace();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	private void CleanAllCache(){
		TaskManager.startRunnableRequest(new Runnable() {

			@Override
			public void run() {
				File log = new File(Constants.LOG_PATH);
				FileUtil.delete(log, true);
				File allCache = new File(Constants.CACHE_DELTE_PATH);
				File delFile = new File(allCache.getPath() + System.currentTimeMillis() + "_del");
				allCache.renameTo(delFile);
				FileUtil.delete(delFile, true);
				System.gc();
			}
		});
	}
	
	@Override
	public void onHttpRecvOK(HttpTag tag, Object result) {
		// TODO Auto-generated method stub
		if (tag.equals(HttpTag.NEWS_REMOTE_CONFIG)) {
			
			WebDev.trackCustomEndEvent(Application.getInstance().getApplicationContext(), EventId.ITIL_LOAD_REMOTE_CONFIG_TIME);
			WebDev.trackCustomEvent(Application.getInstance().getApplicationContext(), EventId.ITIL_LOAD_REMOTE_CONFIG_TIME_RESULT, EventId.VALUE_RESCODE_SUCCESS);
			
			SLog.v("NEWS_REMOTE_CONFIG");
			RemoteConfig newconfig = (RemoteConfig) result;
			Application.getInstance().setVersion(newconfig.getNewsVersion());
			if (newconfig != null && mOldConfig != null) {
				float oldRemoteVersion = Float.valueOf(mOldConfig.getVersion());
				float newRemoteVersion = Float.valueOf(newconfig.getVersion());;
				if (oldRemoteVersion < newRemoteVersion) {
					SLog.v("版本号不同");
					InfoConfigUtil.WriteRemoteConfig(newconfig);
					if(!newconfig.getCleanId().equals(mOldConfig.getCleanId())){
						CleanAllCache();
					}
					if (!newconfig.getSubMenuVersion().equals(mOldConfig.getSubMenuVersion())) {
						getChannelList();
					}
					if (!newconfig.getSubMenuExtendVersion().equals(mOldConfig.getSubMenuExtendVersion())) {
						getExtendedChannelList();
					}
					if(!newconfig.getSplashVersion().equals(mOldConfig.getSplashVersion())){
						getSplashData();
					}
//					if(!newconfig.getBoutiqueVersion().equals(mOldConfig.getBoutiqueVersion())){
//						getAppListData();
//					}
				} else {
					SLog.v("remoteConfig版本号相同");
					checkRemoteSubVersion(newconfig);
				}
			}
		}else if (tag.equals(HttpTag.GET_SUB_CHANNELS)) {
			SLog.v("GET_SUB_CHANNELS");
			ChannelList channelTemp = (ChannelList) result;
			ListMapData channelOld = InfoConfigUtil.ReadSubChannel();
			ListMapData channelNew = null;
			if(channelTemp!=null && channelTemp.getChannelList()!=null && channelTemp.getChannelList().size()>0){
				channelNew=InfoConfigUtil.translate(channelTemp,false);
			}
			ListMapData channel=InfoConfigUtil.mergerListMapData(channelOld, channelNew);
			channel.setVersion(channelTemp.getVersion());
			Application.getInstance().setChannelList(channel);
			InfoConfigUtil.WriteSubChannel(channel);
			
			Intent i = new Intent();
			i.setAction(Constants.NEWS_CHANNEL_NEW_LOAD);
			Application.getInstance().sendBroadcast(i);
		}else if ( tag.equals( HttpTag.GET_EXTENDED_SUB_CHANNELS ) ) {
			mExtendedChannel = (ExtendedChannels) result;
			startDownLoadExtendedIcon(mExtendedChannel);
			
//		}else if(tag.equals(HttpTag.APP_LIST_QQNEWS)){
//			AppList appList = (AppList)result;
//			InfoConfigUtil.WriteAppList(appList);
			
		}else if(tag.equals(HttpTag.SPLASH_DATA)){
			
			WebDev.trackCustomEndEvent(Application.getInstance().getApplicationContext(), EventId.ITIL_LOAD_SPLASH_TIME);
			WebDev.trackCustomEvent(Application.getInstance().getApplicationContext(), EventId.ITIL_LOAD_SPLASH_TIME_RESULT, EventId.VALUE_RESCODE_SUCCESS);
			
			SLog.v("get splash data");
			mSplash = (SplashData)result;
			startDownLoadImage(mSplash);
			SLog.i("NewsRemoteConfigHelper", mSplash.toString());
		}
	}

	@Override
	public void onHttpRecvError(HttpTag tag, HttpCode retCode, String msg) {
		// TODO Auto-generated method stub
		if (tag.equals(HttpTag.NEWS_REMOTE_CONFIG)) {
			WebDev.trackCustomEndEvent(Application.getInstance().getApplicationContext(), EventId.ITIL_LOAD_REMOTE_CONFIG_TIME);
			WebDev.trackCustomEvent(Application.getInstance().getApplicationContext(), EventId.ITIL_LOAD_REMOTE_CONFIG_TIME_RESULT, EventId.VALUE_RESCODE_ERROR);
		}else if(tag.equals(HttpTag.SPLASH_DATA)){
			WebDev.trackCustomEndEvent(Application.getInstance().getApplicationContext(), EventId.ITIL_LOAD_SPLASH_TIME);
			WebDev.trackCustomEvent(Application.getInstance().getApplicationContext(), EventId.ITIL_LOAD_SPLASH_TIME_RESULT, EventId.VALUE_RESCODE_ERROR);
		}
		
	}

	@Override
	public void onHttpRecvCancelled(HttpTag tag) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onImageRecvOK(ImageType imageType, Object tag, Bitmap bm, String path) {
		// TODO Auto-generated method stub
		switch (imageType) {
		case SPLASH_IMAGE:
			mImageUrl.remove((String) tag);
			SLog.i("NewsRemoteConfigHelper", "图片返回" + mImageUrl.size()+ "path" + path);
			if(mImageUrl.size() == 0){
				SLog.i("NewsRemoteConfigHelper", "删除旧图片" + "path" + path);
				deleteOldSplashImage(true);
			}
			break;
		case EXTENDED_IMAGE:
			mExtendIconUrl.remove((String) tag);
			if(mExtendIconUrl.size() == 0){
				deleteOldExtendImage(true);
			}
			break;
		default:
			break;
		}
	}

	@Override
	public void onImageRecvError(ImageType imageType, Object tag, int retCode) {
		// TODO Auto-generated method stub
		switch (imageType) {
		case PNG_IMAGE:
			SLog.i("NewsRemoteConfigHelper", "error-" + "url" + (String) tag);
			deleteOldSplashImage(false);
			break;
		case EXTENDED_IMAGE:
			deleteOldExtendImage(false);
			break;
		default:
			break;
		}
	}
}
