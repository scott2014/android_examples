package com.tencent.news.download;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.tencent.mm.sdk.platformtools.Log;
import com.tencent.news.api.JsonParse;
import com.tencent.news.config.Constants;
import com.tencent.news.model.pojo.Item;
import com.tencent.news.model.pojo.OfflineChannel;
import com.tencent.news.model.pojo.OfflineItems;
import com.tencent.news.model.pojo.OfflinePreview;
import com.tencent.news.shareprefrence.SpOffline;
import com.tencent.news.shareprefrence.SpOfflineOneChannelTime;
import com.tencent.news.utils.FileUtil;
import com.tencent.news.utils.SLog;

public class OffLineDownloadManager implements DownloadListener {
	private static OffLineDownloadManager instance;
	private static final int BUFFER_SIZE = 4096;

	private boolean startParseThread = false;
	private boolean startWaitParse = false;
	private List<OfflinePreview> downloadedData = new ArrayList<OfflinePreview>();
	private LinkedBlockingQueue<String> queue = new LinkedBlockingQueue<String>();

	private List<OfflineChannel> mNeedDownload = null;
	private OffLineDownloadListener mListener = null;
	private int mTag = 0;
	private int TagNum = 0;
	private int zipChildNum;
	private int unzipFinishNum = 1;
	private String appid;
	private int state;
	private final ArrayList<Downloader> downloaders = new ArrayList<Downloader>();
	private boolean beCanceled = false;
	private boolean downloadAllFinish = false;
	private PhonyProgressUpdate p;
	private int phonyNumFromNet;

	public static OffLineDownloadManager getInstance() {
		if (instance == null) {
			instance = new OffLineDownloadManager();

		}
		return instance;
	}

	public void addDownloadTask(List<OfflineChannel> needDownload) {
		downloadAllFinish = false;
		beCanceled = false;
		if (!startParseThread) {
			startParseThread = true;
			startWaitParse = true;
			v2();
		}

		int len = needDownload.size();

		SLog.i("ol", "needDownload.size()--->" + needDownload.size());

		if (needDownload != null && len != 0) {
			TagNum = len;
			mNeedDownload = new ArrayList<OfflineChannel>();
			mNeedDownload.addAll(needDownload);
			state = DownloadConstants.T_DOWNLOAD;
			mTag = 0;
			unzipFinishNum = 1;

			startDownloadTask();
		}
	}

	public void addListener(OffLineDownloadListener listener) {
		if (listener != null) {
			mListener = listener;
		}
	}

	long startDown;

	private void startDownloadTask() {
		
		startDown = System.currentTimeMillis();
		
		phonyNumFromNet = 40 + (int) (Math.random() * 10);
		p = new PhonyProgressUpdate();
		p.setMaxNum(phonyNumFromNet);
		p.setPhonyNum(0);
		p.setRun(true);
		p.start();
		String url = mNeedDownload.get(mTag).getPath();
		String filesize = mNeedDownload.get(mTag).getSize();
		zipChildNum = Integer.parseInt(mNeedDownload.get(mTag).getFile_count());
		if (url != null && url.length() != 0 && filesize != null && filesize.length() != 0) {
			// 启动下载
			DownloadDBHelper dbHelper = DownloadDBHelper.getInstance();
			appid = String.valueOf(System.currentTimeMillis());
			Downloader downloader = new Downloader(appid, url, "", dbHelper, "", this, "", filesize);
			downloaders.add(downloader);
			downloader.startDownload();

		}
	}

	public void stopDownloadTask() {
		beCanceled = true;
		mTag = 0;
		int size = downloaders.size();
		for (int i = 0; i < size; i++) {
			downloaders.get(i).pauseDownload();
		}
		startWaitParse = false;
		downloadAllFinish = true;
		if (p != null) {
			p.exit();
		}
		state = DownloadConstants.T_PAUSE;
		// if (mListener != null) {
		// mListener = null;
		// }
	}

	public void doNotification() {
		DownloadNotificationManager.getInstance().showNotification(123456, DownloadConstants.T_UPDATE_PROGRESS, DownloadNotificationManager.OFFLINE_TYPE, "", "");
	}

	public void stopNotification() {
		if (downloadedData != null && downloadedData.size() > 0 && mNeedDownload != null && mNeedDownload.size() > 0) {
			DownloadNotificationManager.getInstance().showNotification(123456, DownloadConstants.T_INSTALL, DownloadNotificationManager.OFFLINE_TYPE, "", "");
		}
	}

	public void killNotification() {
		DownloadNotificationManager.getInstance().kill(123456);
	}

	private void unzipFile() {
		String fileName = Downloader.getLocalfileName(mNeedDownload.get(mTag).getPath());
		File gzFile = new File(getFilePath(appid, fileName, ""));
		Unzip(gzFile, Constants.CACHE_OFFLINE_PATH);
	}

	public static String getFilePath(String appid, String fileName, String tmp) {
		return Downloader.DOWNLOAD_PATH + "_" + appid + "_" + fileName + tmp;
	}

	private void deleteFile() {
		String fileName = Downloader.getLocalfileName(mNeedDownload.get(mTag).getPath());
		File gzFile = new File(getFilePath(appid, fileName, ""));
		if (gzFile.exists()) {
			gzFile.delete();
		}
	}

	@Override
	public void onDownloadGetSizeFinish(Downloader downloader) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onDownloadInitFileError(Downloader downloader) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onDownloadBegin(Downloader downloader) {
		Log.v("vincesun", "offline::begin");

	}

	@Override
	public void onDownloadPause(Downloader downloader, int n_progress) {
		// TODO Auto-generated method stub
		state = DownloadConstants.T_PAUSE;
		int surplus = TagNum - mTag - 1;
		int s = n_progress * 60 / 100;
		mListener.downloadProgressChanged(DownloadConstants.T_PAUSE, s, mNeedDownload.get(mTag), surplus);
	}

	@Override
	public void onDownloadWait(Downloader downloader) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onDownloadUpdate(Downloader downloader, String progress, int n_progress) {

		if (!beCanceled) {
			state = DownloadConstants.T_UPDATE_PROGRESS;
		}

		int surplus = TagNum - mTag - 1;
		int s = n_progress * 60 / 100;
		Log.v("vincesun", "下载进度:::::" + String.valueOf(s));
		if (p.getPhonyNum() > phonyNumFromNet || p.getPhonyNum() < s) {
			p.setRun(false);
			p.exit();
			Log.v("vincesun", "结束假进度::" + p.getPhonyNum());
			if (mListener != null && p.getPhonyNum() < s) {
				mListener.downloadProgressChanged(DownloadConstants.T_UPDATE_PROGRESS, s, mNeedDownload.get(mTag), surplus);
			}
		}
		SLog.i("ol", "onDownloadUpdate()------>" + (DownloadConstants.T_UPDATE_PROGRESS == OffLineDownloadManager.getInstance().getState()));
	}

	@Override
	public void onDownloadUpdate(List<Downloader> downloaders) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onDownloadError(Downloader downloader, int n_progress) {
		Log.v("vincesun", "offline::ERROR!!!!!!!!");
		state = DownloadConstants.T_ERROR;
		beCanceled = true;
		int surplus = TagNum - mTag - 1;
		int s = n_progress * 60 / 100;
		mListener.downloadProgressChanged(DownloadConstants.T_ERROR, s, mNeedDownload.get(mTag), surplus);
	}

	@Override
	public void onDownloadFinish(Downloader downloader) {
		Log.v("ol", "下载完成");

		SLog.i("olTime", "下载一个压缩包耗时" + (System.currentTimeMillis() - startDown) + "ms");

		if (downloader.isDownloading()) {
			downloader.pauseDownload();
		}
		p = new PhonyProgressUpdate();
		p.setMaxNum(90);
		p.setPhonyNum(60);
		p.setRun(true);
		p.start();
		unzipFile();
	}

	private void updateP() {

		int surplus = TagNum - mTag - 1;
		unzipFinishNum++;
		int progress = (int) ((unzipFinishNum * 100f / zipChildNum));
		int s = (int) (progress * 0.4) + 60;
		if (p.getPhonyNum() > 90 || p.getPhonyNum() < s) {
			p.setRun(false);
			p.exit();
			Log.v("vincesun", "结束假进度");
			if (mListener != null && p.getPhonyNum() < s) {
				mListener.downloadProgressChanged(DownloadConstants.T_UPDATE_PROGRESS, s, mNeedDownload.get(mTag), surplus);
			}
		}

		Log.v("ol", "解压进度:::::" + String.valueOf(progress));

		Log.v("vincesun", String.valueOf(progress));
		Log.v("vincesun", "下载进度（解压）:::::" + String.valueOf(s));
		// if (mListener != null) {
		//
		// mListener.downloadProgressChanged(DownloadConstants.T_UPDATE_PROGRESS,
		// s, mNeedDownload.get(mTag), surplus);
		// }
		if (progress == 100) {
			SLog.v("ol", "解压完成===================" + mNeedDownload.get(mTag).getChlid());
			p.exit();
			addParseTask(mNeedDownload.get(mTag).getChlid());
			deleteFile();
			if (surplus != 0 && !beCanceled) {
				mTag++;
				unzipFinishNum = 1;
				startDownloadTask();
			} else {
				p.exit();
				if (mListener != null) {
					downloadAllFinish = true;
					state = DownloadConstants.T_INSTALL;
					mListener.downloadProgressChanged(DownloadConstants.T_INSTALL, 0, mNeedDownload.get(mTag), surplus);
				}
			}
		}
	}

	@Override
	public void onDownloadDelete(Downloader downloader) {
		// TODO Auto-generated method stub

	}

	@Override
	public void downloadUrlChangeError(Downloader downloader) {
		// TODO Auto-generated method stub

	}

	@Override
	public void installError(Downloader downloader) {
		// TODO Auto-generated method stub

	}

	@Override
	public void installSucceed(String appid, String packageName, Downloader downloader) {
		// TODO Auto-generated method stub

	}

	@Override
	public void uninstallSucceed(String appid, String packageName) {
		// TODO Auto-generated method stub

	}

	public class PhonyProgressUpdate extends Thread {
		public int phonyNum = 0;
		public boolean isRun;
		public int maxNum;

		public int getMaxNum() {
			return maxNum;
		}

		public void setMaxNum(int maxNum) {
			this.maxNum = maxNum;
		}

		public boolean isRun() {
			return isRun;
		}

		public void setRun(boolean isRun) {
			this.isRun = isRun;
		}

		public int getPhonyNum() {
			return phonyNum;
		}

		public void setPhonyNum(int phonyNum) {
			this.phonyNum = phonyNum;
		}

		public PhonyProgressUpdate() {
		}

		@Override
		public void run() {
			while (isRun) {
				try {
					if (!this.isInterrupted()) {
						if (phonyNum > maxNum) {
							isRun = false;
							this.interrupt();
						}
						phonyNum += 1;
						if (phonyNum > 100) {
							phonyNum = 100;
						}
						Log.v("vincesun", "phonyNum::::" + phonyNum);
						int surplus = TagNum - mTag - 1;
						if (mListener != null) {
							mListener.downloadProgressChanged(DownloadConstants.T_UPDATE_PROGRESS, phonyNum, mNeedDownload.get(mTag), surplus);
						}
						Thread.sleep(100);

					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		public void exit() {
			try {
				if (Thread.currentThread().isAlive()) {
					isRun = false;
					this.interrupt();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

		}
	}

	private void Unzip(final File zip, final String dir) {

		new Thread(new Runnable() {

			@Override
			public void run() {

				long startunzip = System.currentTimeMillis();

				String strEntry = null;
				try {
					BufferedOutputStream dest = null;
					FileInputStream fis = new FileInputStream(zip);
					ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
					ZipEntry entry = null;
					while ((entry = zis.getNextEntry()) != null) {

						try {
							strEntry = entry.getName();

							File entryFile = new File(dir + strEntry);

							if (entry.isDirectory()) {
								entryFile.mkdirs();

								SLog.i("ol", "解压出一个文件___夹" + strEntry);

								updateP();
								continue;

							} else {
								SLog.i("ol", "解压出一个文件" + strEntry);
								FileUtil.makeDIRAndCreateFile(dir + strEntry);
							}

							int count;
							byte data[] = new byte[BUFFER_SIZE];
							FileOutputStream fos = new FileOutputStream(entryFile);
							dest = new BufferedOutputStream(fos, BUFFER_SIZE);
							while ((count = zis.read(data, 0, BUFFER_SIZE)) != -1) {
								dest.write(data, 0, count);
							}

							dest.flush();
							dest.close();
						} catch (Exception ex) {
							ex.printStackTrace();
						}
						updateP();
					}
					zis.close();

				} catch (Exception e) {
					e.printStackTrace();
				}

				SLog.i("olTime", "解压耗时" + (System.currentTimeMillis() - startunzip) + "ms");

			}
		}).start();
	}

	public int getState() {
		return state;
	}

	public void setState(int state) {
		this.state = state;
	}

	public List<OfflineChannel> getNeedDownload() {
		return mNeedDownload;
	}

	public List<OfflinePreview> getDownloadedData() {
		return downloadedData;
	}

	public void setDownloadedData(List<OfflinePreview> downloadedData) {
		this.downloadedData = downloadedData;
	}

	public synchronized void addParseTask(String channelName) {

		SLog.i("ol", "addParseTask()--->增加解析任务---->" + (channelName));

		if (channelName != null) {
			try {
				if (!queue.contains(channelName)) {
					queue.put(channelName);
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	public synchronized void v2() {

		new Thread(new Runnable() {

			@Override
			public void run() {

				SLog.i("ol", "等待解析启动               startWaitParse---->" + startWaitParse);

				while (startWaitParse) {
					String channelName = null;
					try {
						while ((channelName = queue.take()) != null) {

							SLog.i("ol", "v2()--->得到解析任务---->" + (channelName));

							try {
								String json = FileUtil.readString(Constants.CACHE_OFFLINE_PATH + channelName);

								long sjiexi = System.currentTimeMillis();
								SLog.d("ol", "======================开始解析" + channelName);
								OfflineItems oi = JsonParse.parseOfflineLibWithoutArticlepool(json);
								SLog.d("ol", "======================完成解析" + channelName + (System.currentTimeMillis() - sjiexi));

								List<Item> items = oi.orderByIdsAndSeparateItemSpecialReportAndBack5Items(channelName);
								SpOfflineOneChannelTime.setUpdataChannelTime(channelName, System.currentTimeMillis());

								SLog.i("olTime", "解析耗时" + (System.currentTimeMillis() - sjiexi) + "ms");

								OfflinePreview op = new OfflinePreview();
								op.setDownloadedChannel(channelName);
								op.setDownloadedItems(items);

								SLog.i("ol", "v2()--->解析完成一个频道");

								if (downloadedData != null) {
									if (downloadedData.size() > 0) {
										int location = downloadedData.indexOf(op);
										if (location < 0) {
											downloadedData.add(op);
										} else {
											downloadedData.set(location, op);
										}
									} else {
										downloadedData.add(op);
									}

									FileUtil.saveCache(new File(Constants.CACHE_OFFLINE_LIST_PATH), downloadedData);
									if (mListener != null) {
										if (downloadAllFinish || beCanceled) {
											mListener.afterParse();
										}
									}

								}

							} catch (Exception e) {
								e.printStackTrace();
							}
						}

					} catch (Exception e1) {
						e1.printStackTrace();
					}

					try {
						Thread.sleep(300);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					SLog.i("ol", "v2()--->循环起来等任务.....................");
				}
				startParseThread = false;
			}
		}).start();
	}

	public int getmTag() {
		return mTag;
	}

	public void setmTag(int mTag) {
		this.mTag = mTag;
	}

}
