
package com.tencent.news.cache;

import android.content.Context;
import android.content.IntentFilter;
import android.net.ConnectivityManager;
import android.os.Handler;
import android.os.Message;
import android.util.Log;

import com.tencent.news.api.TencentNews;
import com.tencent.news.boss.EventId;
import com.tencent.news.command.HttpDataRequest;
import com.tencent.news.command.HttpDataResponse;
import com.tencent.news.command.HttpTagDispatch.HttpTag;
import com.tencent.news.http.HttpEngine.HttpCode;
import com.tencent.news.model.pojo.RssCatListItem;
import com.tencent.news.model.pojo.RssChannelList;
import com.tencent.news.model.pojo.UserInfo;
import com.tencent.news.shareprefrence.SpConfig;
import com.tencent.news.system.Application;
import com.tencent.news.system.NetTipsReceiver;
import com.tencent.news.task.TaskManager;
import com.tencent.news.utils.SLog;
import com.tencent.news.utils.StringUtil;
import com.tencent.omg.webdev.WebDev;

import java.util.ArrayList;
import java.util.List;

public class RssChannelSyncHelper implements HttpDataResponse {

    public interface IRssChannelChanged {
        void onChannelChange();
    }

    private static RssChannelSyncHelper sInstance = null;

    protected Context mContext;
    private String uid = SpConfig.getUUID();

    protected final int SYNC_IDLE = 0;
    protected final int SYNC_ING = 1;
    protected final int SYNC_PENDING = 2;
    protected final int SYNC_COVER = 3;
    protected int syncStatus = SYNC_IDLE;
    protected Object syncLock = new Object();

    private ArrayList<IRssChannelChanged> mRssChannelChangedListener = new ArrayList<IRssChannelChanged>();
    
    private UserRssChannelRecord mCurrentUser = null;

    private boolean appStartedSyncing = false;  // 网络状态变化会引起2次broadcast回调。屏蔽掉一个
    protected NetTipsReceiver mNetTipsReceiver;
    private Handler mHandler = new Handler() {
      public void handleMessage(Message msg) {
          boolean connected = (Boolean)msg.obj;
          if (connected) {
              onAppStart();
          }
      }
    };
    
    // 仅用户手动刷新回调
    private HttpDataResponse mHttpDataResponse = null;

    public static RssChannelSyncHelper getInstance() {
        synchronized (RssChannelSyncHelper.class) {
            if (sInstance == null) {
                sInstance = new RssChannelSyncHelper();
            }
        }
        return sInstance;
    }

    /**
     * 从内存中读取增删记录
     */
    private RssChannelSyncHelper() {
        mContext = Application.getInstance().getApplicationContext();

        if (UserDBHelper.getInstance().getUserInfo() == null) {
        	mCurrentUser = new UserRssChannelRecord(getUid(), UserRssChannelRecord.ID_TYPE_UUID);
        } else {
        	mCurrentUser = new UserRssChannelRecord(getCurrentUser(), UserRssChannelRecord.ID_TYPE_QQ);
        }

        try {
            IntentFilter filter = new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
            mNetTipsReceiver = new NetTipsReceiver(mHandler);
            mContext.registerReceiver(mNetTipsReceiver, filter);
        } catch (Exception e) {
            SLog.e(e.toString());
        }
    }
    
    public String getUid() {
    	return uid;
    }
    
    private String getCurrentUser() {
        UserInfo uf = UserDBHelper.getInstance().getUserInfo();
        return uf != null ? uf.getAccount() : getUid();
    }

    public void regChangeListener(IRssChannelChanged listener) {
        synchronized (mRssChannelChangedListener) {
            if (!mRssChannelChangedListener.contains(listener)) {
                mRssChannelChangedListener.add(listener);
            }
        }
    }
    
    public void unregChangeListener(IRssChannelChanged listener) {
        synchronized (mRssChannelChangedListener) {
            mRssChannelChangedListener.remove(listener);
        }
    }

    /**
     * idsString: 自己构造的增删记录，格式：add=xx,xx&del=xx,xx
     */
    public void reload(String idsString) {
        synchronized (syncLock) {
        	mCurrentUser.reload(idsString);
            sync();
            mCurrentUser.dump("reload");
        }
    }

    /**
     * 增加一个订阅频道
     */
    public void addChannel(String channelId, boolean sync) {
        synchronized (syncLock) {
        	if (mCurrentUser.addChannel(channelId)) {
                WebDev.trackCustomEvent(mContext, EventId.BOSS_RSS_CLICK_ADD_BTN, channelId);
//        		sync();
        	    if (sync) {
        	        sync();
        	    }
        		mCurrentUser.dump("add");
        	}
        }
    }

    /**
     * 删除一个订阅频道
     */
    public void delChannel(String channelId, boolean sync) {
        synchronized (syncLock) {
        	if (mCurrentUser.delChannel(channelId)) {
                WebDev.trackCustomEvent(mContext, EventId.BOSS_RSS_CLICK_CANCEL_BTN, channelId);
//        		sync();
                if (sync) {
                    sync();
                }
        		mCurrentUser.dump("del");
        	}
        }
    }
    
    /**
     * 手动刷新同步
     */
    public void doSync(HttpDataResponse httpResponse) {
        synchronized (syncLock) {
            if (httpResponse != null) {
                this.mHttpDataResponse = httpResponse;
            }
            sync();
        }
    }

    /**
     * 和服务器同步
     */
    private final void sync() {
        if (syncStatus == SYNC_COVER) {
            return;
        } else if (syncStatus == SYNC_IDLE) {
            syncStatus = SYNC_ING;
        } else if (syncStatus == SYNC_ING) {
            syncStatus = SYNC_PENDING;
        }
        if (syncStatus == SYNC_ING) {
            HttpDataRequest request = TencentNews.getInstance().syncRssChannelList(
                    mCurrentUser.getAddIds(), mCurrentUser.getDelIds());
            TaskManager.startHttpDataRequset(request, this);
        }
    
    }
    
    public boolean isBookedChannel(String id) {
        synchronized (syncLock) {
            boolean booked = false;
            if (mCurrentUser != null) {
                booked = mCurrentUser.isBookedChannel(id);
            }
            return booked;
        }
    }

    /**
     * 获取订阅的频道id列表
     */
    public List<String> getRssChannelIds() {
        synchronized (syncLock) {
            ArrayList<String>list = new ArrayList<String>(); 
            list.addAll(mCurrentUser.getAllChannelIdSet());
            return list;
        }
    }
    
    public int getRssChannelCount() {
        synchronized (syncLock) {
            return mCurrentUser.getAllChannelIdSet().size();
        }
    }
    
    /**
     * 获取订阅的频道id列表字符串
     */
    public String getRssChannelIdString() {
        synchronized (syncLock) {
            String str = StringUtil.List2String(mCurrentUser.getAllChannelIdSet());
            return str;
        }
    }
    
    /**
     * 服务器返回全量的订阅列表后，比较version，如果不同，用新的列表覆盖本地的
     * @param version
     * @param channelList
     * @param coverOperation 是否保留本地的操作历史
     */
    public void syncRssChannel(String version, List<RssCatListItem> channelList, boolean coverOperation) {
        if (version == null || version.length() == 0 || channelList == null) {
            return;
        }
        synchronized (syncLock) {
            String localVersion = SpConfig.getRssChannelVersion();
            if (localVersion.equals(version)) {
                return;
            }
            SpConfig.setRssChannelVersion(version);
    
            boolean listChanged = mCurrentUser.isDifferent(channelList);
            boolean hasOperation = mCurrentUser.hasOperation();
            
            if (listChanged) {
                mCurrentUser.reload(channelList, coverOperation);
                synchronized (mRssChannelChangedListener) {
                    for (IRssChannelChanged listener : mRssChannelChangedListener) {
                        listener.onChannelChange();
                    }
                }
            } else if (coverOperation && hasOperation) {
                mCurrentUser.resetOperation();
            }
            if (!coverOperation && hasOperation) {
                sync();
            }
    
        	mCurrentUser.dump("syncRSS");
        }
    }

    @Override
    public void onHttpRecvOK(HttpTag tag, Object result) {
        if (tag.equals(HttpTag.RSS_SYNC_CHANNEL_LIST)) {
            synchronized (syncLock) {
                appStartedSyncing = false;
                if (syncStatus == SYNC_PENDING) {
                    syncStatus = SYNC_IDLE;
                    sync();
                    return;
                } else if (syncStatus == SYNC_COVER) {
                	return;
                }

                RssChannelList rssChannelList = (RssChannelList) result;
                processSyncResult(rssChannelList);
                syncStatus = SYNC_IDLE;
            }
        } else if (tag.equals(HttpTag.RSS_COVER_CHANNEL_LIST)) {
            synchronized (syncLock) {
            	SpConfig.setRssCoverParam("");
            	RssChannelList rssChannelList = (RssChannelList) result;
            	processSyncResult(rssChannelList);
            	syncStatus = SYNC_IDLE;
            }
        }
        if (mHttpDataResponse != null) {
            mHttpDataResponse.onHttpRecvOK(tag, result);
            mHttpDataResponse = null;
        }
    	mCurrentUser.dump("onHttpOK");
    }
    
    private void processSyncResult(RssChannelList rssChannelList) {
        if (rssChannelList.getRet().equals("0") ||
                rssChannelList.getRet().equals("1")) {
        	String version = rssChannelList.getVersion();
        	List<RssCatListItem> channelList = rssChannelList.getChannellist();
        	syncRssChannel(version, channelList, true);
        }
    }

    @Override
	public void onHttpRecvError(HttpTag tag, HttpCode retCode, String msg) {
		Log.e("august", this.toString() + " sync failed. msg = " + msg);
		synchronized (syncLock) {
            appStartedSyncing = false;
			syncStatus = SYNC_IDLE;
		}
		if (tag.equals(HttpTag.RSS_COVER_CHANNEL_LIST)) {
			SpConfig.setRssCoverParam("");
		}
        if (mHttpDataResponse != null) {
            mHttpDataResponse.onHttpRecvError(tag, retCode, msg);
            mHttpDataResponse = null;
        }
	}

    @Override
    public void onHttpRecvCancelled(HttpTag tag) {
    	synchronized (syncLock) {
            appStartedSyncing = false;
    		syncStatus = SYNC_IDLE;
    	}
		if (tag.equals(HttpTag.RSS_COVER_CHANNEL_LIST)) {
			SpConfig.setRssCoverParam("");
		}
        if (mHttpDataResponse != null) {
            mHttpDataResponse.onHttpRecvCancelled(tag);
            mHttpDataResponse = null;
        }
    }

    public void onAppStart() {
        synchronized (syncLock) {
            if (!appStartedSyncing) {
            	mCurrentUser.dump("onAppStart");
            	sync();
            	appStartedSyncing = true;
            }
        }
    }
    
    public void onAppStop() {
        if (mNetTipsReceiver != null) {
            mContext.unregisterReceiver(mNetTipsReceiver);
            mNetTipsReceiver = null;
        }
    }
    
    public void onLoginSuccess(String qq) {
        synchronized (syncLock) {
            mCurrentUser.dump("onLoginSuccess");
            mCurrentUser.changeToQQ(qq);
        	SpConfig.setRssCoverParam("");
            sync();
        }
    }
    
    public void onLogout() {
        synchronized (syncLock) {
            mCurrentUser.dump("onLogout");
        	mCurrentUser.changeToUid(getUid());
        	needCover();
        }
    }
    
    /**
     * 1. 退出QQ
     * 2. 上次cover失败，检测到需要再次cover
     */
    public void needCover() {
        synchronized (syncLock) {
            if (!mCurrentUser.isQQUser()) {
                mCurrentUser.dump("needCover");
                syncStatus = SYNC_COVER;
                String param = mCurrentUser.getAllIds();
                SpConfig.setRssCoverParam(param);
                HttpDataRequest request = TencentNews.getInstance().rssCoverChannelList(param);
                TaskManager.startHttpDataRequset(request, this);
            }
        }
    }
}
